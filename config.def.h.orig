/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 2;        /* border pixel of windows */
static const unsigned int gappx     = 10;
static const unsigned int snap      = 32;       /* snap pixel */
static const int swallowfloating    = 0;        /* 1 means swallow floating windows by default */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const int vertpad            = 10;       /* vertical padding of bar */
static const int sidepad            = 10;       /* horizontal padding of bar */
static const int user_bh            = 0;        /* 0 means that dwm will calculate bar height, >= 1 means dwm will user_bh as bar height */
static const int horizpadbar        = 10;        /* horizontal padding for statusbar */
static const int vertpadbar         = 10;        /* vertical padding for statusbar */

/*   Display modes of the tab bar: never shown, always shown, shown only in */
/*   monocle mode in presence of several windows.                           */
/*   Modes after showtab_nmodes are disabled                                */
enum showtab_modes { showtab_never, showtab_auto, showtab_nmodes, showtab_always};
static const int showtab            = showtab_auto; /* Default tab bar show mode */
static const Bool toptab            = False;    /* False means bottom tab bar */

static const char *fonts[]          = { "fontawesome:size=15", "DejaVuSansMono Nerd Font Mono:size=13"};
static const char col_gray1[]       = "#222222";
static const char col_gray2[]       = "#666666";
static const char col_gray3[]       = "#bbbbbb";
static const char col_gray4[]       = "#eeeeee";
static const char col_cyan[]        = "#7733ee";
static const char col_borderbar[]   = "#222222";
static const char *colors[][3]      = {
	/*                  fg         bg         border   */
	[SchemeNorm]    = { col_gray3, col_gray1, col_gray2 },
	[SchemeSel]     = { col_gray4, col_cyan,  col_cyan  },
	[SchemeDis]     = { col_gray2, col_gray1, col_gray2 },
};

static const char *const autostart[] = {
	"sh", "-c", "sh ~/scripts/xinit.sh", NULL,
	NULL /* terminate */
};

/* tagging */
static const char *tags[] = { "", "", "", "", "", "", "", "", "" };

/* default layout per tags */
/* The first element is for all-tag view, following i-th element corresponds to */
/* tags[i]. Layout is referred using the layouts array index.*/
static int def_layouts[1 + LENGTH(tags)]  = { 0, 0, 0, 0, 0, 0, 2, 0, 2, 2};


static const char *tagsel[][2] = {
	{ "#d990cd", col_gray1 },
	{ "#fbdf90", col_gray1 },
	{ "#81d4ee", col_gray1 },
	{ "#89e19c", col_gray1 },
	{ "#d990cd", col_gray1 },
	{ "#fbdf90", col_gray1 },
	{ "#81d4ee", col_gray1 },
	{ "#89e19c", col_gray1 },
	{ "#d990cd", col_gray1 },
};

static const unsigned int ulinepad	= 5;	/* horizontal padding between the underline and tag */
static const unsigned int ulinestroke	= 2;	/* thickness / height of the underline */
static const unsigned int ulinevoffset	= 0;	/* how far above the bottom of the bar the line should appear */
static const int ulineall 		= 0;	/* 1 to show underline on all tags, 0 for just the active ones */

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */

    /* class                 instance  title           tags mask  iscentered  isfloating  isterminal  noswallow  monitor */
	{ "Gimp",                NULL,     NULL,           1 << 7,    0,          1,          0,           0,        -1 },
	{ "LibreWolf",           NULL,     NULL,           1 << 2,    0,          0,          0,          -1,        -1 },
	{ "firefox",             NULL,     NULL,           1 << 2,    0,          0,          0,          -1,        -1 },
	{ "Brave-browser",       NULL,     NULL,           1 << 2,    0,          0,          0,          -1,        -1 },
	{ "St",                  NULL,     NULL,           0,         0,          0,          1,           0,        -1 },
    { NULL,                  NULL,     "Zoom Meeting", 1 << 1,    0,          1,          0,          -1,        -1 },
    { NULL,                  NULL,     "Zoom Cloud Meetings", 1 << 1,    0,          1,          0,          -1,        -1 },
    { "cmus",                NULL,     NULL,           1 << 3,    0,          0,          0,          -1,        -1 },
	{ "TelegramDesktop",     NULL,     NULL,           1 << 4,    0,          0,          0,          -1,        -1 },
	{ "Discord",             NULL,     NULL,           1 << 4,    0,          0,          0,          -1,        -1 },
	{ "cpsrc",               NULL,     NULL,           1 << 1,    0,          0,          0,          -1,        -1 },
	{ "Emacs",               NULL,     NULL,           1 << 1,    0,          0,          0,          -1,        -1 },
	{ NULL,                  NULL,     "Event Tester", 0,         0,          0,          0,           1,        -1 }, /* xev */
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
	{ "|M|",      centeredmaster },
	{ ">M>",      centeredfloatingmaster },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, NULL };
static const char *termcmd[]  = { "st", NULL };

#include <X11/XF86keysym.h>

static Key keys[] = {
	/* modifier                     key                         function            argument */
    { 0,                            XK_Print,                   spawn,              SHCMD("~/scripts/screenshot.sh") },
    { 0,                            XF86XK_PowerOff,            spawn,              SHCMD("~/scripts/poweroff.sh") },
    { 0,                            XF86XK_AudioMute,           spawn,              SHCMD("~/scripts/mute.sh 1") },
    { 0,                            XF86XK_AudioRaiseVolume,    spawn,              SHCMD("amixer set Master 1%+") },
    { 0,                            XF86XK_AudioLowerVolume,    spawn,              SHCMD("amixer set Master 1%-") },
    { 0,                            XF86XK_AudioPrev,           spawn,              SHCMD("~/scripts/playmus.sh 3") },
    { 0,                            XF86XK_AudioNext,           spawn,              SHCMD("~/scripts/playmus.sh 2") },
    { 0,                            XF86XK_AudioPause,          spawn,              SHCMD("~/scripts/playmus.sh 1") },
    { 0,                            XF86XK_AudioPlay,           spawn,              SHCMD("~/scripts/playmus.sh 1") },
    { 0,                            XF86XK_AudioStop,           spawn,              SHCMD("~/scripts/playmus.sh 1") },
    { 0,                            XF86XK_MonBrightnessUp,     spawn,              SHCMD("brightnessctl s +5%")},
    { 0,                            XF86XK_MonBrightnessDown,   spawn,              SHCMD("brightnessctl s 5%-")},
    { ControlMask|ShiftMask,        XK_space,                   spawn,              SHCMD("dunstctl close") },
    { Mod1Mask|ShiftMask,           NULL,                       spawn,              SHCMD("~/scripts/switch-input.sh") },
    { MODKEY|ShiftMask,             XK_space,                   togglealwaysontop,  {0} },
    { MODKEY,                       XK_w,                       spawn,              SHCMD("firefox") },
    { MODKEY,                       XK_c,                       spawn,              SHCMD("~/scripts/showcal.sh") },
    { MODKEY|ShiftMask,             XK_l,                       spawn,              SHCMD("slock.sh") },
    { MODKEY|ShiftMask,             XK_d,                       spawn,              SHCMD("killall Discord") },
    { MODKEY|ShiftMask,             XK_e,                       spawn,              SHCMD("emacsclient --create-frame") },
    { MODKEY|ShiftMask,             XK_m,                       spawn,              SHCMD("~/scripts/autostart.sh") },
    { MODKEY|ShiftMask,             XK_j,                       spawn,              SHCMD("screenkey.sh") },
    { MODKEY|ShiftMask,             XK_k,                       spawn,              SHCMD("killall screenkey") },
    { MODKEY|ShiftMask,             XK_s,                       spawn,              SHCMD("~/scripts/screenshot.sh 1") },
    { MODKEY|ShiftMask,             XK_n,                       spawn,              SHCMD("~/scripts/network.sh") },
    { MODKEY|ShiftMask,             XK_x,                       spawn,              SHCMD("mixer.sh") },
    { MODKEY|ShiftMask,             XK_t,                       spawn,              SHCMD("telegram-desktop") },
    { MODKEY|ShiftMask,             XK_a,                       spawn,              SHCMD("~/scripts/start-jack.sh 1") },
    { MODKEY,                       XK_p,                       spawn,              {.v = dmenucmd } },
	{ MODKEY|ShiftMask,             XK_Return,                  spawn,              {.v = termcmd } },
	{ MODKEY,                       XK_b,                       togglebar,          {0} },
	{ MODKEY,                       XK_w,                       tabmode,            {-1} },
	{ MODKEY,                       XK_j,                       focusstack,         {.i = +1 } },
	{ MODKEY,                       XK_k,                       focusstack,         {.i = -1 } },
	{ MODKEY,                       XK_i,                       incnmaster,         {.i = +1 } },
	{ MODKEY,                       XK_d,                       incnmaster,         {.i = -1 } },
	{ MODKEY,                       XK_h,                       setmfact,           {.f = -0.05} },
	{ MODKEY,                       XK_l,                       setmfact,           {.f = +0.05} },
	{ MODKEY,                       XK_Return,                  zoom,               {0} },
	{ MODKEY,                       XK_Tab,                     view,               {0} },
	{ MODKEY|ShiftMask,             XK_c,                       killclient,         {0} },
	{ MODKEY,                       XK_t,                       setlayout,          {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,                       setlayout,          {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,                       setlayout,          {.v = &layouts[2]} },
	{ MODKEY,                       XK_u,                       setlayout,          {.v = &layouts[3]} },
	{ MODKEY,                       XK_o,                       setlayout,          {.v = &layouts[4]} },
	{ MODKEY,                       XK_space,                   setlayout,          {0} },
	{ MODKEY|ShiftMask,             XK_space,                   togglefloating,     {0} },
	{ MODKEY,                       XK_0,                       view,               {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,                       tag,                {.ui = ~0 } },
	{ MODKEY,                       XK_comma,                   focusmon,           {.i = -1 } },
	{ MODKEY,                       XK_period,                  focusmon,           {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,                   tagmon,             {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period,                  tagmon,             {.i = +1 } },
	{ MODKEY,                       XK_minus,                   setgaps,            {.i = -5 } },
	{ MODKEY,                       XK_equal,                   setgaps,            {.i = +5 } },
	{ MODKEY|ShiftMask,             XK_equal,                   setgaps,            {.i = 0  } },
	TAGKEYS(                        XK_1,                                           0)
	TAGKEYS(                        XK_2,                                           1)
	TAGKEYS(                        XK_3,                                           2)
	TAGKEYS(                        XK_4,                                           3)
	TAGKEYS(                        XK_5,                                           4)
	TAGKEYS(                        XK_6,                                           5)
	TAGKEYS(                        XK_7,                                           6)
	TAGKEYS(                        XK_8,                                           7)
	TAGKEYS(                        XK_9,                                           8)
	{ MODKEY|ShiftMask,             XK_q,                       quit,               {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
	{ ClkTabBar,            0,              Button1,        focuswin,       {0} },
};

